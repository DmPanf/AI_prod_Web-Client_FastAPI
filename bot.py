from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import requests
import asyncio
import aiohttp
from aiohttp import ClientSession
from io import BytesIO
import os
from dotenv import load_dotenv

load_dotenv()

USER_ID = os.environ['USER_ID']
API_TOKEN = os.environ['API_TOKEN']
#url = 'http://app:8001/process_image'
#API_URL = 'http://api-serv.ru:8001/'
API_URL = 'http://app:8001/'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


async def register_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="‚ôªÔ∏è –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="/help", description="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        types.BotCommand(command="/date", description="üìÜ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É"),
        types.BotCommand(command="/power", description="ü™© –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)"),
    ]
    await bot.set_my_commands(commands)


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_image(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data = await bot.download_file(file_path)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    url = API_URL + 'process_image'
    response = requests.post(url, files={"image": ("input_image.png", image_data, "image/png")})

    if response.status_code == 200:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        output_image_data = BytesIO(response.content)
        output_image_data.seek(0)
        await message.reply_photo(photo=output_image_data, caption="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –≤–µ—Ä–Ω—É –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
#    await message.reply(text, parse_mode=ParseMode.MARKDOWN)
    keyboard = create_inline_keyboard()
    await message.reply(text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)


@dp.message_handler(commands=['date'])
async def get_date(message: types.Message):
    async with ClientSession() as session:
        url = API_URL + 'date'
        headers = {'accept': 'application/json'}

        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                date_data = await response.json()
                await message.reply(f"Date data: {date_data}")
            else:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–µ.")


@dp.message_handler(commands=['power'])
async def get_power(message: types.Message):
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.get_args().split()
    if len(args) != 2:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /power. –ù–∞–ø—Ä–∏–º–µ—Ä: /power 10 20")
        return

    param1, param2 = args

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
    try:
        float(param1)
        float(param2)
    except ValueError:
        await message.reply("–û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /power 10 20")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    async with aiohttp.ClientSession() as session:
        url = API_URL + f'power?x={param1}&y={param2}'
        async with session.get(url) as response:
            if response.status == 200:
                power_data = await response.json()
                await message.reply(f"{param1}^{param2}: {power_data}")
            else:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å.")

def create_inline_keyboard():
    keyboard = InlineKeyboardMarkup()
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(InlineKeyboardButton("üìÜ –ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É", callback_data="get_date"))
    keyboard.add(InlineKeyboardButton("ü™© –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å", callback_data="get_power"))
    return keyboard


@dp.callback_query_handler(lambda c: c.data == 'get_date')
async def get_date_callback(callback_query: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        url = API_URL + 'date'
        async with session.get(url) as response:
            if response.status == 200:
                date_data = await response.json()
                await bot.answer_callback_query(callback_query.id, f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date_data['date']}")
            else:
                await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã.")

@dp.callback_query_handler(lambda c: c.data == 'get_power')
async def get_power_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /power —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /power 10 20")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/date - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
/power _arg1_ _arg2_ - –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)

üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –≤–µ—Ä–Ω—É –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

ü™© –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /power —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /power 25 3
"""

    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN)


async def main():
    await register_commands(bot)

    while True:
        try:
            await bot.send_message(chat_id=USER_ID, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await dp.start_polling()
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞")
            await bot.send_message(chat_id=USER_ID, text="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await asyncio.sleep(5)


if __name__ == '__main__':
    asyncio.run(main())
